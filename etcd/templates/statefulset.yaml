{{- $etcdPeerProtocol := include "etcd.peerProtocol" . }}
{{- $etcdClientProtocol := include "etcd.clientProtocol" . }}
{{- $etcdAuthOptions := include "etcd.authOptions" . }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "etcd.fullname" . }}
  labels:
  {{- include "etcd.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit | default 5 }}
  {{- if .Values.statefulset }}
  updateStrategy:
    type: {{ .Values.statefulset.updateStrategy }}
    {{- if (eq "Recreate" .Values.statefulset.updateStrategy) }}
    rollingUpdate: null
  {{- else if .Values.statefulset.rollingUpdatePartition }}
    rollingUpdate:
      partition: {{ .Values.statefulset.rollingUpdatePartition }}
  {{- end }}
  {{- end }}
  selector:
    matchLabels:
  {{- include "etcd.selectorLabels" . | nindent 6 }}
  serviceName: {{ include "etcd.fullname" . }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
    {{- include "etcd.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "etcd.serviceAccountName" . }}
      securityContext:
      {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: peer
              containerPort: {{ .Values.service.peerPort }}
              protocol: TCP
            - name: client
              containerPort: {{ .Values.service.clientPort }}
              protocol: TCP
            {{- if .Values.metrics.enabled }}
            - name: metrics
              containerPort: 8081
              protocol: TCP
            {{- end }}
          env:
            - name: PEER_PROTOCOL
              value: {{ $etcdPeerProtocol }}
            - name: CLIENT_PROTOCOL
              value: {{ $etcdClientProtocol }}
            - name: AUTH_OPTIONS
              value: {{ $etcdPeerProtocol }}
            - name: ETCDCTL_API
              value: "3"
            - name: INITIAL_CLUSTER_SIZE
              value: {{ .Values.replicaCount | quote }}
            - name: ETCD_DATA_DIR
              value: {{ .Values.etcd.walDir | default "/etcd/data" }}
            {{- if .Values.etcd.walDir }}
            - name: ETCD_WAL_DIR
              value: {{ .Values.etcd.walDir | default "/etcd/wal" }}
            {{- end }}
            - name: ETCD_LOGGER
              value: {{ .Values.etcd.logger | default "zap" }}
            {{- if .Values.auth.peer.secureTransport }}
            {{- if .Values.auth.peer.useAutoTLS }}
            - name: ETCD_PEER_AUTO_TLS
              value: {{ .Values.auth.peer.useAutoTLS }}
            {{- end }}
            - name: ETCD_PEER_CERT_FILE
              value: "/etcd/certs/client-ca.pem"
            - name: ETCD_PEER_KEY_FILE
              value: "/etcd/certs/client-ca-key.pem"
            {{- if .Values.auth.peer.enableAuthentication }}
            - name: ETCD_PEER_CLIENT_CERT_AUTH
              value: "true"
            - name: ETCD_PEER_TRUSTED_CA_FILE
              value: "/etcd/certs/etcd-root-ca.pem"
            {{- end }}
            {{- end }}
            {{- if and .Values.auth.client.secureTransport }}
            - name: ETCD_CERT_FILE
              value: "/etcd/certs/client-ca.pem"
            - name: ETCD_KEY_FILE
              value: "/etcd/certs/client-ca-key.pem"
            {{- if .Values.auth.client.enableAuthentication }}
            - name: ETCD_CLIENT_CERT_AUTH
              value: "true"
            - name: ETCD_TRUSTED_CA_FILE
              value: "/etcd/certs/etcd-root-ca.pem"
            {{- end }}
            {{- end }}
            {{- if .Values.metrics.enabled }}
            - name: ETCD_METRICS
              value: {{ .Values.etcd.metrics }}
            - name: ETCD_LISTEN_METRICS_URLS
              value: "http://0.0.0.0:8081"
            {{- end }}
            - name: SET_NAME
              value: {{ template "etcd.fullname" . }}
            {{- if .Values.extraEnvs }}
            {{ toYaml .Values.extraEnvs | nindent 12 }}
            {{- end }}
          {{- if and .Values.metrics.enabled .Values.livenessProbe }}
          livenessProbe:
            {{ toYaml .Values.livenessProbe | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: datadir
              mountPath: /etcd/data/
            {{- if or .Values.auth.client.enableAuthentication (and .Values.auth.client.secureTransport ) }}
            - name: etcd-client-certs
              mountPath: /etcd/certs
              readOnly: true
            {{- end }}
            {{- with .Values.extraVolumeMounts}}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          lifecycle:
            preStop:
              exec:
                command:
                  - "/bin/sh"
                  - "-ec"
                  - |{{ .Files.Get "scripts/prestop.sh" | nindent 20 }}
          command:
            - "/bin/sh"
            - "-ec"
            - |{{ .Files.Get "scripts/run.sh" | nindent 14 }}
      volumes:
        {{- if or .Values.auth.client.enableAuthentication (and .Values.auth.client.secureTransport ) }}
        - name: etcd-client-certs
          secret:
            secretName: {{ required "A secret containinig the client certificates is required" .Values.auth.existingSecret }}
            defaultMode: 256
        {{- end }}
      {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            # upstream recommended max is 700M
            storage: "{{ .Values.persistentVolume.storage }}"
        {{- if .Values.persistentVolume.storageClass }}
        {{- if (eq "-" .Values.persistentVolume.storageClass) }}
        storageClassName: ""
        {{- else }}
        storageClassName: "{{ .Values.persistentVolume.storageClass }}"
        {{- end }}
        {{- end }}
  {{- else }}
      - name: datadir
        {{- if .Values.memoryMode }}
          emptyDir:
            medium: Memory
        {{- else }}
            emptyDir: {}
        {{- end }}
  {{- end}}
